<!--  Define la ruta URL para acceder a esta página (será accesible en /represen-visual)-->
@page "/variable-indicador"  
<!--  Importa el espacio de nombres para trabajar con listas y colecciones -->
@using System.Collections.Generic  
@using System.Text.Json  
<!--  Importa el espacio de nombres para trabajar con JSON -->
@using Services  
<!--  Importa el espacio de nombres donde se encuentra el Servicio entidad-->
@inject ServicioEntidad servicioEntidad
<!--  Inyecta el servicio que se comunicará con la API Servicio entidad -->
@inject NavigationManager navegacionManager  
<!--  Inyecta el servicio para manejar la navegación entre páginas Servicio entidad-->
@inject SesionUsuarioService Sesion


 
<PageTitle>Lista de variables por indicadores</PageTitle>  <!-- Define el título que se mostrará en la pestaña del navegador -->
 
<h1 class="mb-4 text-primary">Variables por Indicadores</h1>

@if (cargandoSesion)
{
    <p><em>Verificando sesión...</em></p>
    return;
}

 
<!-- Botón para mostrar/ocultar el formulario -->
<button class="btn btn-primary mb-3" @onclick="ToggleFormulario">
    @((mostrarFormulario ? "Cerrar formulario" : "Crear Variable Indicador"))
</button>
 
<!-- Formulario oculto al inicio -->
@if (mostrarFormulario)
{
    <div class="card p-4 mb-4 shadow">
        <div class="row">
 
            <div class="col-md-6 mb-3">
                <label>Variable</label>
                <select class="form-control" @bind="nuevoVariable">
                    <option value="">Seleccione</option>
                    @foreach (var tipo in listaVariable)
                    {
                        <option value="@tipo["id"]?.ToString()">@tipo["nombre"]?.ToString()</option>
                    }
                </select>
            </div>
 
             <div class="col-md-6 mb-3">
                <label>Indicador</label>
                <select class="form-control" @bind="nuevoIndicador">
                    <option value="">Seleccione</option>
                    @foreach (var tipo in listaIndicador)
                    {
                        <option value="@tipo["id"]?.ToString()">@tipo["nombre"]?.ToString()</option>
                    }
                </select>
            </div>
 
            <div class="col-md-6 mb-3">
                <label>Dato</label>
                <input type="number" class="form-control" @bind="nuevoDato" placeholder="Dato" />
            </div>
            <div class="col-md-6 mb-3">
                <label>Usuario</label>
                <select class="form-control" @bind="nuevoUsuario">
                    <option value="">Seleccione</option>
                    @foreach (var tipo in listaUsuario)
                    {
                        <option value="@tipo["email"]?.ToString()">@tipo["email"]?.ToString()</option>
                    }
                </select>
            </div>    
            <div class="col-md-6 mb-3">
                <label>Fecha dato</label>
                <input type="date" class="form-control" @bind="nuevoFechaCalculo" placeholder="FechaCalculo" />
            </div>
       
 
        @if (PuedeCrear)
        {
            <button class="btn btn-success w-100 mt-3" @onclick="CrearVariableIndicador">Crear Variable por indicador</button>
        }
    </div>
    </div>
}
 
 
 
 
<!-- Bloque condicional que muestra un indicador de carga si los datos están cargando -->
<!-- Si no está cargando pero no hay resultados de indicadores o la lista es nula, muestra un mensaje informativo -->
<!-- Si hay resultados de indicadores para mostrar, muestra la tabla -->
@if (cargando)
{
    <p><em>Cargando...</em></p>  <!-- Mensaje de carga con énfasis (cursiva) -->
}
else if (variableIndicadores == null || variableIndicadores.Count == 0)
{
    <p>No hay resultados de variables de indicadores disponibles.</p>  <!-- Mensaje cuando no hay represen visual para mostrar -->
}
else
{
    <div class="table-responsive">
    <table class="table table-striped table-bordered align-middle text-center">
        <thead>
            <tr>
            <th>id</th>
            <th>Variable</th>
            <th>Indicador</th>
            <th>Dato</th>
            <th>Usuario</th>
            <th>Fecha</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var variable in variableIndicadores)
            {
                var id = ObtenerValor(variable, "id");
                var idvariable = ObtenerValor(variable, "fkidvariable");
                var indicador = ObtenerValor(variable, "fkidindicador");
                var dato = ObtenerValor(variable, "dato");
                var usuario = ObtenerValor(variable, "fkemailusuario");
                var fecha = ObtenerValor(variable, "fechadato");            
                <tr>
                    <!-- Muestra el ID del elemento -->
                    <td>@id</td>
                    <td>
                        @if (editandoId == id) // estamos editando este elemento específico
                        {
                            <!-- Muestra un input para editar el nombre -->
                            <input @bind="variableEditado" class="form-control" />
                        }
                        else
                        {
                            <!-- Muestra el nombre tal cual si no se está editando -->
                            @idvariable
                        }
                    </td>
                    <td>
                        @if (editandoId == id) // estamos editando este elemento específico
                        {
                            <!-- Muestra un input para editar el nombre -->
                            <input @bind="indicadorEditado" class="form-control" />
                        }
                        else
                        {
                            <!-- Muestra el nombre tal cual si no se está editando -->
                            @indicador
                        }
                    </td>
                    <td>
                        @if (editandoId == id) // estamos editando este elemento específico
                        {
                            <!-- Muestra un input para editar el nombre -->
                            <input @bind="datoEditado" class="form-control" />
                        }
                        else
                        {
                            <!-- Muestra el nombre tal cual si no se está editando -->
                            @dato
                        }
                    </td>
                    <td>
                        @if (editandoId == id) // estamos editando este elemento específico
                        {
                            <!-- Muestra un input para editar el nombre -->
                            <input @bind="usuarioEditado" class="form-control" />
                        }
                        else
                        {
                            <!-- Muestra el nombre tal cual si no se está editando -->
                            @usuario
                        }
                    </td>
                    <td>
                        @if (editandoId == id) // estamos editando este elemento específico
                        {
                            <!-- Muestra un input para editar el nombre -->
                            <input @bind="fechaEditado" class="form-control" />
                        }
                        else
                        {
                            <!-- Muestra el nombre tal cual si no se está editando -->
                            @fecha
                        }
                    </td>
                    <td>
                        <div class="d-flex justify-content-center gap-2 flex-wrap">
                            @if (editandoId == id)
                            {
                                <button class="btn btn-sm btn-success" @onclick="() => GuardarEdicion(id)">
                                    <i class="bi bi-check2"></i> Guardar
                                </button>
                                <button class="btn btn-sm btn-secondary" @onclick="CancelarEdicion">
                                    <i class="bi bi-x-lg"></i> Cancelar
                                </button>
                            }
                            else
                            {
                                @if (PuedeEditar)
                                {
                                    <button class="btn btn-sm btn-primary" @onclick="() => EmpezarEdicion(id, int.Parse(idvariable), int.Parse(indicador), double.Parse(dato), usuario, DateTime.Parse(fecha))">
                                        <i class="bi bi-pencil-square"></i> Editar
                                    </button>
                                }
                                @if (PuedeEliminar)
                                {
                                    <button class="btn btn-sm btn-danger" @onclick="() => EliminarIndicador(id)">
                                        <i class="bi bi-trash"></i> Eliminar
                                    </button>
                                }
                            }
                        </div>
                    </td>
 
                </tr>
                }
        </tbody>
    </table>
    </div>
 
 
 
<!-- Mostrar mensaje de error si existe -->
@if (errorMensaje != null)
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}
 
@code {
    private bool cargandoSesion = true;

    private bool PuedeCrear => Sesion.EsAdministrador;
    private bool PuedeEditar => Sesion.EsAdministrador || Sesion.EsValidador;
    private bool PuedeEliminar => Sesion.EsAdministrador;

    
    // Lista para almacenar los productos que se obtienen de la API
    private List<Dictionary<string, object>> variableIndicadores = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> listaIndicador = new();
    private List<Dictionary<string, object>> listaVariable = new();
    private List<Dictionary<string, object>> listaUsuario = new();
    // Bandera para indicar si se están cargando los datos
    private bool cargando = true;
   
    // Variable para almacenar mensajes de error
    private string? errorMensaje = null;
 
    // Variables para crear
    private int? nuevoVariable= 0;
    private string nuevoIndicador = string.Empty;
    private double? nuevoDato = 0;
    private string nuevoUsuario = string.Empty;
    private DateTime nuevoFechaCalculo = DateTime.Now;
   
   
 
    // Variables para editar
    private string? editandoId = null;
    private int variableEditado = 0;
    private int indicadorEditado = 0;
    private double datoEditado = 0;
    private string usuarioEditado = string.Empty;
    private DateTime fechaEditado = DateTime.Now;
   
    private bool mostrarFormulario = false;
    private void ToggleFormulario()
    {
        mostrarFormulario = !mostrarFormulario;
    }  
 
    // Constantes para los parámetros de la API
    private const string PROYECTO = "csharpapigenerica";
    private const string TABLA = "variablesporindicador";
 
    // Método que se ejecuta cuando se inicializa el componente
    protected override async Task OnInitializedAsync()
    {
        await Sesion.CargarSesionAsync();
        cargandoSesion = false;

        if (!Sesion.TieneAcceso())
            return;

        await CargarVariablesIndicador();
        await CargarListasSelect(); 
    }

 
    // Método asíncrono para cargar los represen visual desde la API
    private async Task CargarVariablesIndicador()
    {
        // Establecer la bandera de carga en verdadero
        cargando = true;
        // Limpiar cualquier mensaje de error previo
        errorMensaje = null;
       
        try
        {
            // Obtener todos los represen visual usando el servicio de entidades
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
           
            // Si la lista no es null, asignarla a la variable represen visual
            if (resultado != null)
            {
                variableIndicadores = resultado;
            }
            else
            {
                // Si es null, inicializar como lista vacía para evitar errores
                variableIndicadores = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            // En caso de error, guardar el mensaje y crear lista vacía
            errorMensaje = $"Error al cargar las variables del indicador: {ex.Message}";
            variableIndicadores = new List<Dictionary<string, object>>();
        }
        finally
        {
            // Establecer la bandera de carga en falso una vez finalizada la operación
            cargando = false;
        }
    }
 
    private async Task CargarListasSelect()
    {
        try
        {
            listaIndicador = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "indicador") ?? new List<Dictionary<string, object>>();
            listaVariable = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "variable") ?? new List<Dictionary<string, object>>();
            listaUsuario = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "usuario") ?? new List<Dictionary<string, object>>();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar listas de selección: {ex.Message}";
        }
    }
 
 
    // Método para obtener un valor específico de un diccionario de manera segura
    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        // Verificar si el diccionario es null
        if (diccionario == null)
            return string.Empty;
           
        // Verificar si el diccionario contiene la clave
        if (diccionario.TryGetValue(clave, out var valor))
        {
            // Devolver el valor como cadena, o cadena vacía si es null
            return valor?.ToString() ?? string.Empty;
        }
       
        // Si la clave no existe, devolver cadena vacía
        return string.Empty;
    }
 
    // Crear nuevo represen visual
    private async Task CrearVariableIndicador()
    {
        if (!PuedeCrear) return;
        // Verifica que el nombre no esté vacío ni sea solo espacios
        if (nuevoVariable.HasValue && nuevoFechaCalculo != default && !string.IsNullOrWhiteSpace(nuevoIndicador))
        {
            // Crea un nuevo diccionario con el nombre ingresado
            var nuevoVariableIndicador = new Dictionary<string, object>
        {
            { "fkidvariable", nuevoVariable },
            { "fkidindicador", nuevoIndicador },
            { "dato", nuevoDato},
            { "fkemailusuario", nuevoUsuario},
            { "fechadato", nuevoDato},
        };
 
        // Llama al servicio para crear el nuevo elemento en la base de datos
        var exito = await servicioEntidad.CrearAsync(PROYECTO, TABLA, nuevoVariableIndicador);
        if (exito)
        {
            await CargarVariablesIndicador(); // Recarga los datos para mostrar el nuevo elemento
            nuevoVariable = null; // limpiamos el campo del formulario para ingresar mas nombres
        }
        else
        {
            errorMensaje = "No se pudo crear la variable indicador.";
        }
    }
}
 
    // Iniciar edición
    private void EmpezarEdicion(string id, int variableActual, int indicadorActual, double datoActual, string usuarioActual, DateTime fechaActual)
    {
        editandoId = id;
        variableEditado = variableActual;
        indicadorEditado = indicadorActual;
        datoEditado = datoActual;
        usuarioEditado = usuarioActual;
        fechaEditado = fechaActual;
 
    }
 
    // Cancelar edición
    private void CancelarEdicion()
    {
    editandoId = null;
    variableEditado = 0;
    indicadorEditado = 0;
    datoEditado = 0;
    usuarioEditado = string.Empty;
    fechaEditado = DateTime.Now;
   
    }
 
    // Guardar cambios de edición
    private async Task GuardarEdicion(string id)
    {
        if (!PuedeEditar) return;
        try
        {
            var datos = new Dictionary<string, object?>
        {
            { "fkidvariable", variableEditado },
            { "fkidindicador", indicadorEditado},
            { "dato", datoEditado},
            { "fkemailusuario", usuarioEditado},
            { "fechadato", fechaEditado},
        };
 
        // Llama al servicio para actualizar el registro en la base de datos
        var exito = await servicioEntidad.ActualizarAsync(
            PROYECTO,
            TABLA,
            "id",        // nombre de la columna clave
            id,          // valor de la clave
            datos
        );
 
        if (exito)
        {
            await CargarVariablesIndicador(); // Recarga los datos para reflejar los cambios
            CancelarEdicion();
        }
        else
        {
            errorMensaje = "No se pudo actualizar la variable del indicador.";
        }
    }
    catch (Exception ex)
    {
        errorMensaje = $"Error al actualizar: {ex.Message}";
    }
}
 
    // Eliminar
    private async Task EliminarIndicador(string id)
    {
        if (!PuedeEliminar) return;
        var confirmado = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar la variable del indicador con ID {id}?");
        if (confirmado)
        {
            var exito = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", id);
            if (exito)
            {
                await CargarVariablesIndicador();
            }
            else
            {
                errorMensaje = "No se pudo eliminar el resultado del indicador.";
            }
        }
    }
 
    // Inyectar JavaScript runtime para mostrar confirmaciones
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
 
    }
}