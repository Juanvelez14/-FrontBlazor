@page "/represen-visual-indicador"
@using System.Collections.Generic
@using System.Text.Json
@using Services

@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject SesionUsuarioService Sesion


<h1 class="mb-4 text-primary">Represen Visual por Indicadores</h1>

@if (cargandoSesion)
{
    <p><em>Verificando sesión...</em></p>
    return;
}


<!-- Botón para mostrar/ocultar el formulario -->
<button class="btn btn-primary mb-3" @onclick="ToggleFormulario">
    @((mostrarFormulario ? "Cerrar formulario" : "Crear Represen Visual por Indicador"))
</button>

<!-- Formulario oculto al inicio -->
@if (mostrarFormulario)
{
    <div class="card p-4 mb-4 shadow">
        <div class="row">
            <div class="col-md-6 mb-3">
                <label>Indicador</label>
                <select class="form-control" @bind="nuevoIndicador">
                    <option value="">Seleccione</option>
                    @foreach (var tipo in listaIndicador)
                    {
                       <option value="@(Convert.ToInt32(tipo["id"]?.ToString() ?? "0"))">@tipo["nombre"]?.ToString()</option>


                    }
                </select>
            </div>
            <div class="col-md-6 mb-3">
                <label>Represen Visual</label>
                <select class="form-control" @bind="nuevoRepresenVisual">
                    <option value="">Seleccione</option>
                    @foreach (var tipo in listaRepresenVisual)
                    {
                       <option value="@(Convert.ToInt32(tipo["id"]?.ToString() ?? "0"))">@tipo["nombre"]?.ToString()</option>

                    }
                </select>
            </div>
        </div>

        <!-- Deshabilita el botón si no hay selección -->
        @if (PuedeCrear)
        {
            <button class="btn btn-success w-100 mt-3"
                    @onclick="CrearRepresenVisualPorIndicador"
                    disabled="@(nuevoIndicador == 0 || nuevoRepresenVisual == 0)">
                Crear Represen Visual por Indicador
            </button>
        }
    </div>
}

@if (cargando)
{
    <p><em>Cargando...</em></p>
}
else if (represenVisualIndicadores == null || represenVisualIndicadores.Count == 0)
{
    <p>No hay represen visual de indicadores disponibles.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered align-middle text-center">
            <thead>
                <tr>
                    <th>Indicador</th>
                    <th>Represen Visual</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var represenVisual in represenVisualIndicadores)
                {
                    var idIndicadorStr = ObtenerValor(represenVisual, "fkidindicador");
                    var idRepresenvisualStr = ObtenerValor(represenVisual, "fkidrepresenvisual");

                    var idIndicador = int.TryParse(idIndicadorStr, out var tempInd) ? tempInd : -1;
                    var idRepresenvisual = int.TryParse(idRepresenvisualStr, out var tempRep) ? tempRep : -1;

                    // Buscar el diccionario correspondiente
                    var objIndicador = listaIndicador.FirstOrDefault(i => int.Parse(i["id"].ToString()) == idIndicador);
                    var objRepresenVisual = listaRepresenVisual.FirstOrDefault(r => int.Parse(r["id"].ToString()) == idRepresenvisual);

                    var nombreIndicador = objIndicador?["nombre"]?.ToString() ?? "N/A";
                    var nombreRepresenVisual = objRepresenVisual?["nombre"]?.ToString() ?? "N/A";

                    <tr>
                        <td>
                            @if (editandoIndicador == idIndicador)
                            {
                                <select class="form-control" @bind="indicadorEditado">
                                    @foreach (var tipo in listaIndicador)
                                    {
                                        <option value="@int.Parse(tipo["id"].ToString()!)">@tipo["nombre"]?.ToString()</option>
                                    }
                                </select>
                            }
                            else
                            {
                                @nombreIndicador
                            }
                        </td>
                        <td>
                            @if (editandoIndicador == idIndicador)
                            {
                                <select class="form-control" @bind="represenVisualEditado">
                                    @foreach (var tipo in listaRepresenVisual)
                                    {
                                        <option value="@int.Parse(tipo["id"].ToString()!)">@tipo["nombre"]?.ToString()</option>
                                    }
                                </select>
                            }
                            else
                            {
                                @nombreRepresenVisual
                            }
                        </td>
                        <td>
                            <div class="d-flex justify-content-center gap-2 flex-wrap">
                                @if (editandoIndicador == idIndicador)
                                {
                                    <button class="btn btn-sm btn-success" @onclick="() => GuardarEdicion()">
                                        <i class="bi bi-check2"></i> Guardar
                                    </button>
                                    <button class="btn btn-sm btn-secondary" @onclick="CancelarEdicion">
                                        <i class="bi bi-x-lg"></i> Cancelar
                                    </button>
                                }
                                else
                                {
                                    @if (PuedeEditar)
                                    {
                                        <button class="btn btn-sm btn-primary" @onclick="() => EmpezarEdicion(idIndicador, idRepresenvisual)">
                                            <i class="bi bi-pencil-square"></i> Editar
                                        </button>
                                    }
                                    @if (PuedeEliminar)
                                    {
                                        <button class="btn btn-sm btn-danger" @onclick="() => EliminarRepresenVisualIndicador(idIndicador, idRepresenvisual)">
                                            <i class="bi bi-trash"></i> Eliminar
                                        </button>
                                    }
                                }
                            </div>
                            </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
}




<!-- Mostrar mensaje de error si existe -->
@if (errorMensaje != null)
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@code {
    private bool cargandoSesion = true;

    private bool PuedeCrear => Sesion.EsAdministrador;
    private bool PuedeEditar => Sesion.EsAdministrador || Sesion.EsValidador;
    private bool PuedeEliminar => Sesion.EsAdministrador;

    
    // Lista para almacenar los productos que se obtienen de la API
    private List<Dictionary<string, object>> represenVisualIndicadores  = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> listaIndicador = new();
    private List<Dictionary<string, object>> listaRepresenVisual = new();
    // Bandera para indicar si se están cargando los datos
    private bool cargando = true;
    
    // Variable para almacenar mensajes de error
    private string? errorMensaje = null;

    // Variables para crear
    private int nuevoRepresenVisual = 0;
    private int nuevoIndicador = 0;

    // Variables para editar
    private int editandoIndicador = 0;
    private int editandoRepresenVisual = 0;
    private int represenVisualEditado = 0;
    private int indicadorEditado = 0;
    private bool mostrarFormulario = false;
    private void ToggleFormulario()
    {
        mostrarFormulario = !mostrarFormulario;
    }   

    // Constantes para los parámetros de la API
    private const string PROYECTO = "csharpapigenerica";
    private const string TABLA = "represenvisualporindicador";

    // Método que se ejecuta cuando se inicializa el componente
    protected override async Task OnInitializedAsync()
    {
        await Sesion.CargarSesionAsync();
        cargandoSesion = false;

        if (!Sesion.TieneAcceso())
            return;

        await CargarRepresenVisualIndicador();
        await CargarListasSelect(); 
    }


    // Método asíncrono para cargar los represen visual desde la API
    private async Task CargarRepresenVisualIndicador()
    {
        // Establecer la bandera de carga en verdadero
        cargando = true;
        // Limpiar cualquier mensaje de error previo
        errorMensaje = null;
        
        try
        {
            // Obtener todos los represen visual usando el servicio de entidades
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            
            // Si la lista no es null, asignarla a la variable represen visual
            if (resultado != null)
            {
                represenVisualIndicadores  = resultado;
            }
            else
            {
                // Si es null, inicializar como lista vacía para evitar errores
                represenVisualIndicadores = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            // En caso de error, guardar el mensaje y crear lista vacía
            errorMensaje = $"Error al cargar los resultados del indicador: {ex.Message}";
            represenVisualIndicadores = new List<Dictionary<string, object>>();
        }
        finally
        {
            // Establecer la bandera de carga en falso una vez finalizada la operación
            cargando = false;
        }
    }

    private async Task CargarListasSelect()
    {
        listaIndicador = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "indicador") ?? new List<Dictionary<string, object>>();
        listaRepresenVisual = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "represenvisual") ?? new List<Dictionary<string, object>>();
    }


    // Método para obtener un valor específico de un diccionario de manera segura
    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        // Verificar si el diccionario es null
        if (diccionario == null)
            return string.Empty;
            
        // Verificar si el diccionario contiene la clave
        if (diccionario.TryGetValue(clave, out var valor))
        {
            // Devolver el valor como cadena, o cadena vacía si es null
            return valor?.ToString() ?? string.Empty;
        }
        
        // Si la clave no existe, devolver cadena vacía
        return string.Empty;
    }

    // Crear nuevo represen visual
    private async Task CrearRepresenVisualPorIndicador()
{
    if (!PuedeCrear) return;
    if (nuevoIndicador > 0 && nuevoRepresenVisual > 0)
    {
        var nuevo = new Dictionary<string, object>
        {
            { "fkidindicador", nuevoIndicador },
            { "fkidrepresenvisual", nuevoRepresenVisual },
        };

        var exito = await servicioEntidad.CrearAsync(PROYECTO, TABLA, nuevo);
        if (exito)
        {
            await CargarRepresenVisualIndicador();
            nuevoIndicador = 0;
            nuevoRepresenVisual = 0;
            errorMensaje = null; // Limpia cualquier error anterior
        }
        else
        {
            errorMensaje = "No se pudo crear el represen visual de indicador.";
        }
    }
    else
    {
        errorMensaje = "Debe seleccionar ambos campos.";
    }
}

        


    // Iniciar edición
    private void EmpezarEdicion(int indicadorActual, int represenVisualActual)
    {
        editandoIndicador = indicadorActual;
        indicadorEditado = indicadorActual;
        represenVisualEditado = represenVisualActual;
        editandoRepresenVisual = represenVisualActual;

    }

    // Cancelar edición
    private void CancelarEdicion()
    {
    editandoIndicador = 0;
    editandoRepresenVisual = 0;

    }

    // Guardar cambios de edición
    private async Task GuardarEdicion()
    {
        if (!PuedeEditar) return;
        try
        {
            var datos = new Dictionary<string, object?>
            {
                { "fkidrepresenvisual", represenVisualEditado },
            };

            var clave = indicadorEditado.ToString() ?? "";

            var exito = await servicioEntidad.ActualizarAsync(
                TABLA,                  // entidad
                "fkidindicador",        // campoClave
                clave,                  // valorClave
                "usuario",              // nombreUsuario (ajústalo según tu contexto)
                datos   
            );

            if (exito)
            {
                await CargarRepresenVisualIndicador();
                CancelarEdicion();
            }
            else
            {
                errorMensaje = "No se pudo actualizar el represen visual de indicador.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al actualizar: {ex.Message}";
        }
    }   


    // Eliminar
    private async Task EliminarRepresenVisualIndicador(int indicadorActual, int represenVisualActual)
    {
        if (!PuedeEliminar) return;
        var clave = new Dictionary<string, object>
        {
            { "fkidindicador", indicadorActual },
            { "fkidrepresenvisual", represenVisualActual }
        };

        var exito = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "fkidindicador", indicadorActual.ToString());
        if (exito)
        {
            await CargarRepresenVisualIndicador();
        }
        else
        {
        errorMensaje = "No se pudo eliminar el represen visual de indicador.";
        }
    }

    // Inyectar JavaScript runtime para mostrar confirmaciones
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    }
