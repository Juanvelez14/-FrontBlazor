<!--  Define la ruta URL para acceder a esta página (será accesible en /Unidad-Medicion)-->
@page "/Unidad-Medicion"  
<!--  Importa el espacio de nombres para trabajar con listas y colecciones -->
@using System.Collections.Generic  
@using System.Text.Json  
<!--  Importa el espacio de nombres para trabajar con JSON -->
@using Services  
<!--  Importa el espacio de nombres donde se encuentra el ServicioEntidad-->
@inject ServicioEntidad servicioEntidad 
<!--  Inyecta el servicio que se comunicará con la API ServicioEntidad -->
@inject NavigationManager navegacionManager  
<!--  Inyecta el servicio para manejar la navegación entre páginas ServicioEntidad-->
@inject SesionUsuarioService Sesion



<PageTitle>Lista de Unidad Medicion</PageTitle>  <!-- Define el título que se mostrará en la pestaña del navegador -->

<h1>Unidad Medicion</h1>  <!-- Encabezado principal de la página -->

@if (cargandoSesion)
{
    <p><em>Verificando sesión...</em></p>
    return;
}


<div class="mb-3">
    <input class="form-control" @bind="nuevaDescripcion" placeholder="descripcion de Unidad medicion" />
    @if (PuedeCrear)
    {
        <button class="btn btn-success mt-2" @onclick="CrearUnidadMedicion">Crear</button>
    }
</div>

<!-- Bloque condicional que muestra un indicador de carga si los datos están cargando -->
<!-- Si no está cargando pero no hay Unidad medicion o la lista es nula, muestra un mensaje informativo -->
<!-- Si hay unidad medicion para mostrar, muestra la tabla -->
@if (cargando)
{
    <p><em>Cargando...</em></p>  <!-- Mensaje de carga con énfasis (cursiva) -->
}
else if (unidadesMedicion == null || unidadesMedicion.Count == 0)
{
    <p>No hay Unidades Medicion disponibles.</p>  <!-- Mensaje cuando no hay unidad medicion para mostrar -->
}
else
{
    <div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>id</th>
                <th>Descripcion</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var unidadMedicion in unidadesMedicion)
            {
                var id = ObtenerValor(unidadMedicion, "id");
                var descripcion = ObtenerValor(unidadMedicion, "descripcion");

                <tr>
                    <!-- Muestra el ID del elemento -->
                    <td>@id</td>
                    <td>
                        @if (editandoId == id) // estamos editando este elemento específico
                        {
                            <!-- Muestra un input para editar la descripcion -->
                            <input @bind="descripcionEditada" class="form-control" />
                        }
                        else
                        {
                            <!-- Muestra la descripcion tal cual si no se está editando -->
                            @descripcion
                        }
                    </td>
                    <td>
                        @if (editandoId == id)
                        {
                            <button class="btn btn-sm btn-success me-1" @onclick="() => GuardarEdicion(id)">Guardar</button>
                            <button class="btn btn-sm btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
                        }
                        else
                        {
                            @if (PuedeEditar)
                            {
                                <button class="btn btn-sm btn-primary me-1" @onclick="() => EmpezarEdicion(id, descripcion)">Editar</button>
                            }
                            @if (PuedeEliminar)
                            {
                                <button class="btn btn-sm btn-danger" @onclick="() => EliminarUnidadMedicion(id)">Eliminar</button>
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    </div>

}

<!-- Mostrar mensaje de error si existe -->
@if (errorMensaje != null)
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@code {
    private bool cargandoSesion = true;

    private bool PuedeCrear => Sesion.EsAdministrador;
    private bool PuedeEditar => Sesion.EsAdministrador || Sesion.EsValidador;
    private bool PuedeEliminar => Sesion.EsAdministrador;

    
    // Lista para almacenar los unidad medicion que se obtienen de la API
    private List<Dictionary<string, object>> unidadesMedicion = new List<Dictionary<string, object>>();
    
    // Bandera para indicar si se están cargando los datos
    private bool cargando = true;
    
    // Variable para almacenar mensajes de error
    private string? errorMensaje = null;

    // Variables para crear
    private string nuevaDescripcion = string.Empty;

    // Variables para editar
    private string? editandoId = null;
    private string descripcionEditada = string.Empty;
    
    // Constantes para los parámetros de la API
    private const string PROYECTO = "csharpapigenerica";
    private const string TABLA = "unidadmedicion";

    // Método que se ejecuta cuando se inicializa el componente
    protected override async Task OnInitializedAsync()
    {
        await Sesion.CargarSesionAsync();
        cargandoSesion = false;

        if (!Sesion.TieneAcceso())
            return;

        await CargarUnidadMedicion();
    }


    // Método asíncrono para cargar los unidad medicion desde la API
    private async Task CargarUnidadMedicion()
    {
        // Establecer la bandera de carga en verdadero
        cargando = true;
        // Limpiar cualquier mensaje de error previo
        errorMensaje = null;
        
        try
        {
            // Obtener todos los unidad medicion usando el servicio de entidades
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            
            // Si la lista no es null, asignarla a la variable unidadMedicion
            if (resultado != null)
            {
                unidadesMedicion = resultado;
            }
            else
            {
                // Si es null, inicializar como lista vacía para evitar errores
                unidadesMedicion = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            // En caso de error, guardar el mensaje y crear lista vacía
            errorMensaje = $"Error al cargar unidades de medicion: {ex.Message}";
            unidadesMedicion = new List<Dictionary<string, object>>();
        }
        finally
        {
            // Establecer la bandera de carga en falso una vez finalizada la operación
            cargando = false;
        }
    }

    // Método para obtener un valor específico de un diccionario de manera segura
    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        // Verificar si el diccionario es null
        if (diccionario == null)
            return string.Empty;
            
        // Verificar si el diccionario contiene la clave
        if (diccionario.TryGetValue(clave, out var valor))
        {
            // Devolver el valor como cadena, o cadena vacía si es null
            return valor?.ToString() ?? string.Empty;
        }
        
        // Si la clave no existe, devolver cadena vacía
        return string.Empty;
    }

    // Crear nuevo UnidadMedicion
    private async Task CrearUnidadMedicion()
    {
        if (!PuedeCrear) return;
        // Verifica que el nombre no esté vacío ni sea solo espacios
        if (!string.IsNullOrWhiteSpace(nuevaDescripcion))
        {
            // Crea un nuevo diccionario con el nombre ingresado
            var nuevoTipoActor = new Dictionary<string, object>
        {
            { "descripcion", nuevaDescripcion }
        };

        // Llama al servicio para crear el nuevo elemento en la base de datos
        var exito = await servicioEntidad.CrearAsync(PROYECTO, TABLA, nuevoTipoActor);
        if (exito)
        {
            await CargarUnidadMedicion(); // Recarga los datos para mostrar el nuevo elemento
            nuevaDescripcion = string.Empty; // limpiamos el campo del formulario para ingresar mas nombres
        }
        else
        {
            errorMensaje = "No se pudo crear la unidad medicion.";
        }
    }
}

    // Iniciar edición
    private void EmpezarEdicion(string id, string descripcionActual)
    {
        editandoId = id;
        descripcionEditada = descripcionActual;
    }

    // Cancelar edición
    private void CancelarEdicion()
    {
    editandoId = null;
    descripcionEditada = string.Empty;
    }

    // Guardar cambios de edición
    private async Task GuardarEdicion(string id)
    {
        if (!PuedeEditar) return;
        try
        {
            var datos = new Dictionary<string, object?>
        {
            { "descripcion", descripcionEditada } 
        };

        // Llama al servicio para actualizar el registro en la base de datos
        var exito = await servicioEntidad.ActualizarAsync(
            PROYECTO, 
            TABLA, 
            "id",        // nombre de la columna clave
            id,          // valor de la clave
            datos
        );

        if (exito)
        {
            await CargarUnidadMedicion();
            CancelarEdicion();
        }
        else
        {
            errorMensaje = "No se pudo actualizar la unidad medicion.";
        }
    }
    catch (Exception ex)
    {
        errorMensaje = $"Error al actualizar: {ex.Message}";
    }
}

    // Eliminar
    private async Task EliminarUnidadMedicion(string id)
    {
        if (!PuedeEliminar) return;
        var confirmado = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar la unidad medicion con ID {id}?");
        if (confirmado)
        {
            var exito = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", id);
            if (exito)
            {
                await CargarUnidadMedicion();
            }
            else
            {
                errorMensaje = "No se pudo eliminar la unidad medicion.";
            }
        }
    }

    // Inyectar JavaScript runtime para mostrar confirmaciones
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    }