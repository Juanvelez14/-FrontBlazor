<!--  Define la ruta URL para acceder a esta página (será accesible en /productos)-->
@page "/tipo-actor"  
<!--  Importa el espacio de nombres para trabajar con listas y colecciones -->
@using System.Collections.Generic  
@using System.Text.Json  
<!--  Importa el espacio de nombres para trabajar con JSON -->
@using Services  
<!--  Importa el espacio de nombres donde se encuentra el ServicioEntidad-->
@inject ServicioTipoActor servicioTipoActor 
<!--  Inyecta el servicio que se comunicará con la API ServicioEntidad -->
@inject NavigationManager navegacionManager  
<!--  Inyecta el servicio para manejar la navegación entre páginas ServicioEntidad-->

<PageTitle>Lista de Tipo actor</PageTitle>  <!-- Define el título que se mostrará en la pestaña del navegador -->

<h1>Tipo Actor</h1>  <!-- Encabezado principal de la página -->

<div class="mb-3">  <!-- Contenedor con margen inferior (mb-3 es una clase de Bootstrap) -->
    <button class="btn btn-primary" disabled>Crear Nuevo (Próximamente)</button>  <!-- Botón deshabilitado para crear nuevos productos -->
</div>

<!-- Bloque condicional que muestra un indicador de carga si los datos están cargando -->
<!-- Si no está cargando pero no hay productos o la lista es nula, muestra un mensaje informativo -->
<!-- Si hay productos para mostrar, muestra la tabla -->
@if (cargando)
{
    <p><em>Cargando...</em></p>  <!-- Mensaje de carga con énfasis (cursiva) -->
}
else if (tiposActor == null || tiposActor.Count == 0)
{
    <p>No hay Tipo actores disponibles.</p>  <!-- Mensaje cuando no hay productos para mostrar -->
}
else
{
    <div class="table-responsive">  <!-- Contenedor que hace que la tabla sea responsive (se pueda desplazar horizontalmente en dispositivos pequeños) -->
        <table class="table table-striped">  <!-- Tabla con estilos de Bootstrap (filas alternas sombreadas) -->
            <thead>  <!-- Encabezado de la tabla -->
                <tr>  <!-- Fila del encabezado -->
                    <th>id</th>  <!-- Columna para el código del producto -->
                    <th>Nombre</th>  <!-- Columna para el nombre del producto -->
                </tr>
            </thead>
            <tbody>  <!-- Cuerpo de la tabla donde se muestran los datos -->
                <!-- Bucle foreach que itera sobre cada producto en la lista -->
                @foreach (var tipoActor in tiposActor)
                {
                    <tr>  <!-- Fila para cada producto -->
                        <td>@ObtenerValor(tipoActor, "id")</td>  <!-- Celda que muestra el código usando el método auxiliar -->
                        <td>@ObtenerValor(tipoActor, "nombre")</td>  <!-- Celda que muestra el nombre usando el método auxiliar -->
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Mostrar mensaje de error si existe -->
@if (errorMensaje != null)
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@code {
    // Lista para almacenar los productos que se obtienen de la API
    private List<Dictionary<string, object>> tiposActor = new List<Dictionary<string, object>>();
    
    // Bandera para indicar si se están cargando los datos
    private bool cargando = true;
    
    // Variable para almacenar mensajes de error
    private string? errorMensaje = null;
    
    // Constantes para los parámetros de la API
    private const string PROYECTO = "csharpapigenerica";
    private const string TABLA = "tipoactor";

    // Método que se ejecuta cuando se inicializa el componente
    protected override async Task OnInitializedAsync()
    {
        // Llamar al método para cargar los productos
        await CargarProductos();
    }

    // Método asíncrono para cargar los productos desde la API
    private async Task CargarProductos()
    {
        // Establecer la bandera de carga en verdadero
        cargando = true;
        // Limpiar cualquier mensaje de error previo
        errorMensaje = null;
        
        try
        {
            // Obtener todos los productos usando el servicio de entidades
            var resultado = await servicioTipoActor.ObtenerTodosAsync(PROYECTO, TABLA);
            
            // Si la lista no es null, asignarla a la variable productos
            if (resultado != null)
            {
                tiposActor = resultado;
            }
            else
            {
                // Si es null, inicializar como lista vacía para evitar errores
                tiposActor = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            // En caso de error, guardar el mensaje y crear lista vacía
            errorMensaje = $"Error al cargar productos: {ex.Message}";
            tiposActor = new List<Dictionary<string, object>>();
        }
        finally
        {
            // Establecer la bandera de carga en falso una vez finalizada la operación
            cargando = false;
        }
    }

    // Método para obtener un valor específico de un diccionario de manera segura
    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        // Verificar si el diccionario es null
        if (diccionario == null)
            return string.Empty;
            
        // Verificar si el diccionario contiene la clave
        if (diccionario.TryGetValue(clave, out var valor))
        {
            // Devolver el valor como cadena, o cadena vacía si es null
            return valor?.ToString() ?? string.Empty;
        }
        
        // Si la clave no existe, devolver cadena vacía
        return string.Empty;
    }
}