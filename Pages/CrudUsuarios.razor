@page "/Usuario"
@using System.Collections.Generic
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JSRuntime
@inject SesionUsuarioService Sesion

<PageTitle>Lista Usuarios</PageTitle>

<h1 class="mb-4 text-primary">Usuario</h1>

@if (cargandoSesion)
{
    <p><em>Verificando sesión...</em></p>
    return;
}

<div class="row mb-3">
    <div class="col-md-4">
        <button class="btn btn-primary w-100" @onclick="ToggleFormulario">
            @(mostrarFormulario ? "Cerrar formulario" : "Crear Usuario")
        </button>
    </div>
    <div class="col-md-8">
        <input class="form-control" placeholder="Buscar por email..."
               @bind="filtroUsuario" />
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="card p-4 mb-4 shadow">
        <div class="row">
            <div class="col-md-6 mb-3">
                <label>Usuario (Email)</label>
                <input type="email" class="form-control" @bind="nuevoUsuario" placeholder="Ingrese un nuevo correo" />
            </div>
            <div class="col-md-6 mb-3">
                <label>Contraseña</label>
                <input type="password" class="form-control" @bind="nuevoContraseña"/>
            </div>
            <div class="col-md-6 mb-3">
                <label>Rol</label>
                <select class="form-control" @bind="nuevoRol">
                    <option value="">Seleccione</option>
                    @foreach (var r in listaRoles)
                    {
                        <option value="@r["id"]">@r["nombre"]</option>
                    }
                </select>
            </div>
        </div>
        @if (PuedeCrear)
        {
            <button class="btn btn-success w-100 mt-3" @onclick="CrearUsuario">
                Crear Usuario
            </button>
        }
    </div>
}

@if (cargando)
{
    <p><em>Cargando...</em></p>
}
else
{
    @* Aplica filtro por email *@
    var variablesFiltradas = variables
        .Where(v => string.IsNullOrEmpty(filtroUsuario)
                 || ObtenerValor(v, "email")
                       .Contains(filtroUsuario, StringComparison.OrdinalIgnoreCase))
        .ToList();

    @if (variablesFiltradas.Count == 0)
    {
        <p>No hay usuarios que coincidan con "<strong>@filtroUsuario</strong>".</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-bordered align-middle text-center">
                <thead>
                    <tr>
                        <th>Email</th>
                        <th>Contraseña</th>
                        <th>Rol</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in variablesFiltradas)
                    {
                        var actualEmail  = ObtenerValor(item, "email");
                        var contrasena   = ObtenerValor(item, "contrasena");
                        var rolNombre    = ObtenerValor(item, "rolNombre");

                        <tr>
                            <td>
                                @if (editandoId == actualEmail)
                                {
                                    <input class="form-control" @bind="usuarioEditado" />
                                }
                                else
                                {
                                    @actualEmail
                                }
                            </td>
                            <td>
                                @if (editandoId == actualEmail)
                                {
                                    <input type="password" class="form-control" @bind="contraseñaEditado" />
                                }
                                else
                                {
                                    @contrasena
                                }
                            </td>
                            <td>
                                @if (editandoId == actualEmail)
                                {
                                    <select class="form-control" @bind="rolEditado">
                                        <option value="">Seleccione</option>
                                        @foreach (var r in listaRoles)
                                        {
                                            <option value="@r["id"]" selected="@(rolEditado == r["id"].ToString())">
                                                @r["nombre"]
                                            </option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    @rolNombre
                                }
                            </td>
                            <td>
                                <div class="d-flex justify-content-center gap-2 flex-wrap">
                                    @if (editandoId == actualEmail)
                                    {
                                        <button class="btn btn-sm btn-success"
                                                @onclick="() => GuardarEdicion(actualEmail)">
                                            <i class="bi bi-check2"></i> Guardar
                                        </button>
                                        <button class="btn btn-sm btn-secondary"
                                                @onclick="CancelarEdicion">
                                            <i class="bi bi-x-lg"></i> Cancelar
                                        </button>
                                    }
                                    else
                                    {
                                        @if (PuedeEditar)
                                        {
                                            <button class="btn btn-sm btn-primary"
                                                    @onclick="() => EmpezarEdicion(actualEmail, rolNombre)">
                                                <i class="bi bi-pencil-square"></i> Editar
                                            </button>
                                        }
                                        @if (PuedeEliminar)
                                        {
                                            <button class="btn btn-sm btn-danger"
                                                    @onclick="() => EliminarUsuario(actualEmail)">
                                                <i class="bi bi-trash"></i> Eliminar
                                            </button>
                                        }
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@if (!string.IsNullOrEmpty(errorMensaje))
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@code {
    private bool cargandoSesion = true;

    private bool PuedeCrear   => Sesion.EsAdministrador;
    private bool PuedeEditar  => Sesion.EsAdministrador || Sesion.EsValidador;
    private bool PuedeEliminar=> Sesion.EsAdministrador;

    private List<Dictionary<string, object>> variables   = new();
    private List<Dictionary<string, object>> listaUsuario = new();
    private List<Dictionary<string, object>> listaRoles   = new();
    private bool cargando = true;
    private string? errorMensaje;

    // Datos para crear un usuario
    private string nuevoUsuario     = string.Empty;
    private string nuevoContraseña  = string.Empty;
    private string nuevoRol         = string.Empty;

    // Datos para editar
    private string? editandoId;           // guardará el email “viejo” al entrar a editar
    private string usuarioEditado         = string.Empty; // nuevo email (o el mismo)
    private string rolEditado             = string.Empty; // id del rol seleccionado
    private string contraseñaEditado      = string.Empty; // nueva contraseña

    // Filtro
    private string filtroUsuario = string.Empty;

    private bool mostrarFormulario = false;
    private void ToggleFormulario() => mostrarFormulario = !mostrarFormulario;

    private const string PROYECTO = "csharpapigenerica";
    private const string TABLA    = "rol_usuario";

    protected override async Task OnInitializedAsync()
    {
        await Sesion.CargarSesionAsync();
        cargandoSesion = false;

        if (!Sesion.TieneAcceso())
            return;

        // 1) Cargar roles (y la lista básica de usuarios si la necesitas en el formulario)
        await CargarListasSelect();

        // 2) Con listaRoles disponible, cargar cada usuario y asignar el nombre del rol
        await CargarUsuarios();
    }

    private async Task CargarListasSelect()
    {
        // Cargar usuarios “sin procesar” por si necesitas datos para formularios
        listaUsuario = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "usuario")
                          ?? new List<Dictionary<string, object>>();
        // Cargar roles
        listaRoles = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "rol")
                          ?? new List<Dictionary<string, object>>();
    }

    private async Task CargarUsuarios()
    {
        cargando = true;
        errorMensaje = null;
        try
        {
            // Traer todos los usuarios de la tabla “usuario”
            variables = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "usuario")
                        ?? new List<Dictionary<string, object>>();

            // Por cada usuario, buscamos su rol en “rol_usuario” y agregamos la clave “rolNombre”
            foreach (var usuario in variables)
            {
                var email = ObtenerValor(usuario, "email");
                // Asegúrate de que tu API soporte GET /rol_usuario/fkemail/{email}
                var rolUsuario = await servicioEntidad.ObtenerPorCampoAsync(PROYECTO, "rol_usuario", "fkemail", email);
                if (rolUsuario != null && rolUsuario.Count > 0)
                {
                    var rolId = ObtenerValor(rolUsuario.First(), "fkidrol");
                    var rol = listaRoles.FirstOrDefault(r => r["id"]?.ToString() == rolId);
                    if (rol != null)
                    {
                        usuario["rolNombre"] = rol["nombre"];
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // Si la ruta GET /rol_usuario/fkemail/… está fallando en el backend,
            // aquí recibirás la excepción y podrás ver el mensaje en la consola del navegador.
            errorMensaje = $"Error al cargar usuarios: {ex.Message}";
            variables = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CrearUsuario()
    {
        if (!PuedeCrear) return;

        // Validación rápida
        if (string.IsNullOrWhiteSpace(nuevoUsuario) ||
            string.IsNullOrWhiteSpace(nuevoContraseña) ||
            string.IsNullOrWhiteSpace(nuevoRol))
            return;

        // 1. Crear el usuario en la tabla “usuario”
        var nuevoUsuarioData = new Dictionary<string, object?>
        {
            ["email"]     = nuevoUsuario,
            ["contrasena"]= nuevoContraseña // (Si fuera en producción, encripta aquí)
        };

        var exitoUsuario = await servicioEntidad.CrearAsync(PROYECTO, "usuario", nuevoUsuarioData);
        if (!exitoUsuario)
        {
            errorMensaje = "No se pudo crear el usuario.";
            return;
        }

        // 2. Asignar rol al usuario (usando el ID del rol)
        var rolSeleccionado = listaRoles.FirstOrDefault(r => r["id"]?.ToString() == nuevoRol);
        if (rolSeleccionado == null)
        {
            errorMensaje = "Rol no válido.";
            return;
        }

        var nuevoRolUsuario = new Dictionary<string, object?>
        {
            ["fkemail"] = nuevoUsuario,
            ["fkidrol"] = rolSeleccionado["id"]
        };

        var exitoRolUsuario = await servicioEntidad.CrearAsync(PROYECTO, "rol_usuario", nuevoRolUsuario);
        if (!exitoRolUsuario)
        {
            errorMensaje = "No se pudo asignar el rol al usuario.";
            return;
        }

        // 3. Si todo va bien, recargamos lista y limpiamos formulario
        await CargarUsuarios();
        nuevoUsuario    = string.Empty;
        nuevoContraseña = string.Empty;
        nuevoRol        = string.Empty;
        mostrarFormulario = false;
    }

    private void EmpezarEdicion(string emailViejo, string rolActual)
    {
        // Guardamos el “ID” o llave principal actual (en este caso el email)
        editandoId      = emailViejo;
        usuarioEditado  = emailViejo; // inicializamos el input con el valor actual
        rolEditado      = rolActual;  // en este punto rolActual es el nombre, pero más adelante
        contraseñaEditado = string.Empty;
    }

    private void CancelarEdicion()
    {
        editandoId = null;
        usuarioEditado = string.Empty;
        rolEditado     = string.Empty;
        contraseñaEditado = string.Empty;
    }

    private async Task GuardarEdicion(string emailViejo)
    {
        if (!PuedeEditar) return;

        try
        {
            // 1) Actualizamos PRIMERO la tabla “usuario”:
            var datosUsuario = new Dictionary<string, object?>
            {
                // Si el usuario cambió de email, aquí usuarioEditado != emailViejo.
                ["email"]     = usuarioEditado,
                ["contrasena"]= contraseñaEditado
            };

            var exitoUsuario = await servicioEntidad.ActualizarAsync(
                PROYECTO,
                "usuario",
                "email",      // la columna clave en la tabla “usuario” es “email”
                emailViejo,   // buscamos el registro por el “emailViejo”
                datosUsuario
            );
            if (!exitoUsuario)
            {
                errorMensaje = "No se pudo actualizar el usuario.";
                return;
            }

            // 2) Actualizamos la relación en “rol_usuario”
            //    Pero ten en cuenta:
            //    · Si el correo cambió, la fila en “rol_usuario” seguía apuntando a emailViejo, ahora la tenemos que renombrar.
            //    · El backend debe soportar UPDATE /rol_usuario/fkemail/{emailViejo} con payload:
            //        { fkemail: <emailNuevo>, fkidrol: <nuevoIdRol> }
            //
            //    Primero obtenemos el ID del rol que el usuario tiene en “rolEditado”
            var rolSeleccionado = listaRoles.FirstOrDefault(
                r => r["id"]?.ToString() == rolEditado
                     || r["nombre"]?.ToString() == rolEditado
            );
            if (rolSeleccionado == null)
            {
                errorMensaje = "Rol no válido.";
                return;
            }

            var datosRolUsuario = new Dictionary<string, object?>
            {
                // Aquí “fkemail” es la nueva llave foránea (posiblemente cambiada)
                ["fkemail"] = usuarioEditado,
                ["fkidrol"] = rolSeleccionado["id"]
            };

            var exitoRolUsuario = await servicioEntidad.ActualizarAsync(
                PROYECTO,
                "rol_usuario",
                "fkemail",   // ruta en la API: UPDATE /rol_usuario/fkemail/{emailViejo}
                emailViejo,
                datosRolUsuario
            );
            if (!exitoRolUsuario)
            {
                errorMensaje = "No se pudo actualizar el rol del usuario.";
                return;
            }

            // 3) Si todo salió bien, recargamos la lista y salimos de modo edición
            await CargarUsuarios();
            CancelarEdicion();
        }
        catch (Exception ex)
        {
            // Si la API de backend lanza un error (500), aquí lo verás en ex.Message
            errorMensaje = $"Error al actualizar: {ex.Message}";
        }
    }

    private async Task EliminarUsuario(string email)
    {
        if (!PuedeEliminar) return;

        var confirmado = await JSRuntime.InvokeAsync<bool>(
            "confirm", $"¿Estás seguro de eliminar el usuario de email: {email}?"
        );
        if (!confirmado) return;

        try
        {
            // 1) Primero elimino la fila de “rol_usuario” que apunte a ese email
            var exitoRol = await servicioEntidad.EliminarAsync(
                PROYECTO,
                "rol_usuario",
                "fkemail",
                email
            );
            if (!exitoRol)
            {
                errorMensaje = "No se pudo eliminar la relación rol_usuario.";
                return;
            }

            // 2) Luego elimino el registro en “usuario”
            var exitoUsuario = await servicioEntidad.EliminarAsync(
                PROYECTO,
                "usuario",
                "email",
                email
            );
            if (!exitoUsuario)
            {
                errorMensaje = "No se pudo eliminar el usuario.";
                return;
            }

            // 3) Finalmente recargo la lista
            await CargarUsuarios();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al eliminar: {ex.Message}";
        }
    }

    private string ObtenerValor(Dictionary<string, object> dic, string clave)
        => dic.TryGetValue(clave, out var v) ? v?.ToString() ?? "" : "";
}