@page "/tipoindicador"
@inject FrontBlazor.Services.ServicioTipoIndicador servicioTipoIndicador

<h3>Gesti√≥n de Tipos de Indicador</h3>

@if (tipoIndicadores == null)
{
    <p>Cargando...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in tipoIndicadores)
            {
                <tr>
                    <td>@item["id"]</td>
                    <td>@item["nombre"]</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => Editar(item)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => Eliminar(item["id"].ToString())">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h4>@(editando ? "Editar Tipo Indicador" : "Nuevo Tipo Indicador")</h4>

<div>
    <label>Nombre:</label>
    <input type="text" class="form-control" @bind="tipoIndicador["nombre"]" />
</div>

<button class="btn btn-primary" @onclick="Guardar">Guardar</button>
<button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>

@code {
    private List<Dictionary<string, object>>? tipoIndicadores;
    private Dictionary<string, object> tipoIndicador = new();
    private bool editando = false;
    private string? idActual;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        tipoIndicadores = await servicioTipoIndicador.ObtenerTodosAsync();
    }

    private void Editar(Dictionary<string, object> item)
    {
        idActual = item["id"].ToString();
        tipoIndicador = new Dictionary<string, object>(item);
        editando = true;
    }

    private async Task Guardar()
    {
        if (editando && idActual != null)
        {
            await servicioTipoIndicador.ActualizarAsync(idActual, tipoIndicador);
        }
        else
        {
            await servicioTipoIndicador.CrearAsync(tipoIndicador);
        }
        await CargarDatos();
        Cancelar();
    }

    private async Task Eliminar(string id)
    {
        if (await servicioTipoIndicador.EliminarAsync(id))
        {
            await CargarDatos();
        }
    }

    private void Cancelar()
    {
        tipoIndicador = new Dictionary<string, object>();
        editando = false;
        idActual = null;
    }
}
